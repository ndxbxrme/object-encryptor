{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\nencryptor = require 'encryptor'\r\ndotty = require 'dotty'\r\n\r\nsetPassword = (password) ->\r\n  encryptor.setPassword password\r\n\r\nencryptBit = (bit) ->\r\n  new Promise (resolve) ->\r\n    type = Object.prototype.toString.call bit\r\n    if type is '[object Array]'\r\n      outArr = []\r\n      for subBit in bit\r\n        subBit = await encryptBit subBit\r\n        outArr.push subBit\r\n      resolve outArr\r\n    else if type is '[object Object]'\r\n      outObj = {}\r\n      for key, subBit of bit\r\n        outObj[key] = await encryptBit subBit\r\n      resolve outObj\r\n    else if type is '[object Number]'\r\n      strBit = bit.toString()\r\n      if strBit.indexOf('.') > -1\r\n        resolve '+F' + await encryptor.encrypt bit.toString()\r\n      else\r\n        resolve '+I' + await encryptor.encrypt bit.toString()\r\n    else if type is '[object Boolean]'\r\n      resolve '+B' + await encryptor.encrypt bit.toString()\r\n    else if type is '[object Date]'\r\n      resolve '+D' + await encryptor.encrypt bit.toString()\r\n    else if type is '[object String]'\r\n      resolve await encryptor.encrypt bit\r\n      \r\ndecryptBit = (bit) ->\r\n  new Promise (resolve) ->\r\n    type = Object.prototype.toString.call bit\r\n    if type is '[object Array]'\r\n      outArr = []\r\n      for subBit in bit\r\n        subBit = await decryptBit subBit\r\n        outArr.push subBit\r\n      resolve outArr\r\n    else if type is '[object Object]'\r\n      outObj = {}\r\n      for key, subBit of bit\r\n        outObj[key] = await decryptBit subBit\r\n      resolve outObj\r\n    else if type is '[object String]'\r\n      if bit.indexOf('+') is 0\r\n        switch bit[1]\r\n          when 'I'\r\n            resolve Number.parseInt await encryptor.decrypt bit.slice(2)\r\n          when 'F'\r\n            resolve Number.parseFloat await encryptor.decrypt bit.slice(2)\r\n          when 'B'\r\n            resolve (await encryptor.decrypt bit.slice(2)) is 'true'\r\n          when 'D'\r\n            resolve new Date await encryptor.decrypt bit.slice(2)\r\n      else\r\n        resolve await encryptor.decrypt bit\r\n\r\nencryptObject = (obj, encryptFields) ->\r\n  new Promise (resolve) ->\r\n    for field in encryptFields\r\n      val = dotty.get obj, field\r\n      encrypted = await encryptBit val\r\n      dotty.put obj, field, encrypted\r\n    resolve obj\r\n    \r\n    \r\ndecryptObject = (obj, encryptFields) ->\r\n  new Promise (resolve) ->\r\n    for field in encryptFields\r\n      val = dotty.get obj, field\r\n      decrypted = await decryptBit val\r\n      dotty.put obj, field, decrypted\r\n    resolve obj\r\n\r\nmodule.exports =\r\n  setPassword: setPassword\r\n  encrypt: encryptObject\r\n  decrypt: decryptObject\r\n"
  ]
}